# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  IMAGE: static-site

jobs:
  setup-build-- name: Share Jobs Data
  # You may pin to the exact commit or the version.
  # uses: i3h/share-data@367a3c8fcfaa21b85e7a6ab5115ca385dfbaa7c5
  uses: i3h/share-data@v1.0.0
  with:
    # 
    share-id: 
    # 
    mode: 
    # 
    key: 
    # 
    value: # optionalpublish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
   - name: HTML5 Validator
  # You may pin to the exact commit or the version.
  # uses: Cyb3r-Jak3/html5validator-action@0add3e3a734b3e41cbae0f971538363993ac8b18
  uses: Cyb3r-Jak3/html5validator-action@v0.6.1
  with:
    # Path of the files to test
    root: # optional
    # Path of config file
    config: # optional
    # Extra arguments to test with
    extra: # optional
    # Format for logging output. Valid values: gnu,xml,json,text
    format: # optional
    # Logging Level. Valid values: DEBUG, INFO, WARNING. Default: WARNING
    log_level: # optional, default is WARNING
    # Checks css as well
    css: # optional
    # Files or directories to ignore in checking
    blacklist: # optional
    # Flag that increase verbose output only used for troubleshooting the action.
    action_debug: # optional
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
26
jobs:
27- name: HTML Preview
  # You may pin to the exact commit or the version.
  # uses: pavi2410/html-preview-action@9420cd81fbbe0035f59a39536ea5a0443daffa37
  uses: pavi2410/html-preview-action@v2
  with:
    # The HTML file you want to preview, relative to the root of the repo
    html_file: # default is index.html
  setup-build-publish-deploy:
28
    name: Setup, Build, Publish, and Deploy
29
    runs-on: ubuntu-latest
30
    environment: production
31
   - name: HTML5 Validator
32
  # You may pin to the exact commit or the version.
33
  # uses: Cyb3r-Jak3/html5validator-action@0add3e3a734b3e41cbae0f971538363993ac8b18
34
  uses: Cyb3r-Jak3/html5validator-action@v0.6.1
35
  with:
36
    # Path of the files to test
37
    root: # optional
38
    # Path of config file
39
    config: # optional
40
    # Extra arguments to test with
41
    extra: # optional
42
    # Format for logging output. Valid values: gnu,xml,json,text
43
    format: # optional
44
    # Logging Level. Valid values: DEBUG, INFO, WARNING. Default: WARNING
45
    log_level: # optional, default is WARNING
46
    # Checks css as well
47
    css: # optional
48
    # Files or directories to ignore in checking
49
    blacklist: # optional
50
    # Flag that increase verbose output only used for troubleshooting the action.
51
    action_debug: # optional
52
    steps:
53
    - name: Checkout
54
      uses: actions/checkout@v2
55
​
56
    # Setup gcloud CLI
57
    - uses: google-github-actions/setup-gcloud@v0.2.0
58
      with:
59
        service_account_key: ${{ secrets.GKE_SA_KEY }}
60
        project_id: ${{ secrets.GKE_PROJECT }}
61
​
62
    # Configure Docker to use the gcloud command-line tool as a credential
63
    # helper for authentication
64
    - run: |-
65
        gcloud --quiet auth configure-docker
66
​
67
    # Get the GKE credentials so we can deploy to the cluster
68
    - uses: google-github-actions/get-gke-credentials@v0.2.1
69
      with:
70
        cluster_name: ${{ env.GKE_CLUSTER }}
71
        location: ${{ env.GKE_ZONE }}
72
        credentials: ${{ secrets.GKE_SA_KEY }}
73
​
74
    # Build the Docker image
75
    - name: Build
76
      run: |-
77
        docker build \
78
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
79
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
80
          --build-arg GITHUB_REF="$GITHUB_REF" \
81
          .
82
​
83
    # Push the Docker image to Google Container Registry
84
    - name: Publish
Use Control + Space to trigger autocomplete in most situations.
 /  / HTML Preview
HTML Preview
 v2
 11
Preview HTML page

View full Marketplace listing
Installation

    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
